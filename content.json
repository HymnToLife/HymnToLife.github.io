{"meta":{"title":"HymnToLife's Home","subtitle":null,"description":null,"author":"HymnToLife","url":"http://yoursite.com","root":"/"},"pages":[{"title":"about","date":"2019-04-20T03:21:39.098Z","updated":"2019-04-20T03:21:39.083Z","comments":true,"path":"about.html","permalink":"http://yoursite.com/about.html","excerpt":"","text":"在读大学生 软件学院 什么都不会，但是正在学习 本博客仅供自己学习使用"}],"posts":[{"title":"2019.05.17","slug":"2019-05-17","date":"2019-05-17T02:33:35.000Z","updated":"2019-05-17T03:00:38.059Z","comments":true,"path":"2019/05/17/2019-05-17/","link":"","permalink":"http://yoursite.com/2019/05/17/2019-05-17/","excerpt":"","text":"这个分类主要是想到什么就记录什么，没有什么逻辑性可言 最近公司要求用react做前端的web项目，我记得我当初报实习填选的职位是iOS开发实习生来着。","categories":[{"name":"随便写写","slug":"随便写写","permalink":"http://yoursite.com/categories/随便写写/"}],"tags":[]},{"title":"php+sftp实现文件的操作","slug":"php-sftp实现文件的操作","date":"2019-05-14T01:56:34.000Z","updated":"2019-05-14T03:51:17.567Z","comments":true,"path":"2019/05/14/php-sftp实现文件的操作/","link":"","permalink":"http://yoursite.com/2019/05/14/php-sftp实现文件的操作/","excerpt":"","text":"问题的起因最近做了一个简单的小项目，类似简书那种网页端写博客，提交后自动生成并跳转至一份适配手机端的网页。现在测试阶段公司希望我能将用户上传的图片文件保存在内部的服务器上。我的后端使用php写的，公司的服务器使用ssh连接，思考了一下发现使用php+sftp的形式比较方便，于是开始上网查阅资料。 资料的收集查阅了一下官方的文档，发现一个叫ssh2的函数比较适合 Bindings to the libssh2 library which provide access to resources (shell, remote exec, tunneling, file transfer) on a remote machine using a secure cryptographic transport. 这里放一下PHP的官方文档的网址—&gt;Secure Shell2 准备工作ssh2需要两个前置条件，OpenSSL和libssh2，由于我用的是MacBook Pro，这里只介绍macOS下使用这一函数的方法。 Homebrew的安装详情自己搜索或等我的另一篇博客 OpenSSL的安装理论上讲macOS X自带有OpenSSL，但是OpenSSL被曝出过有严重的安全漏洞，详情可自行查询OpenSSL的”心脏出血（Heartbleed）”事件，简单的说就是使用OpenSSL可能被黑客攻击抓取铜壶电脑上的内存数据。 所以macOS X自10.11 EI Capitan起，将原来的OpenSSL替换成了现在的LibreSSL，这对于我的这个项目其实没有什么影响。 $ openssl version 这段代码可以查看openssl的版本，我显示的是LibreSSL 2.6.5 libssh2的安装$ brew install libssh2 不得不说homebrew确实很方便，不过安装的过程可能会卡在Updating Homebrew...上，遇到这种情况可以用一次^C来停止更新，但是着只能解决这一次的困境。一劳永逸的办法是挂代理或者是改镜像库，可以改到清华等地的库中。 如果没有homebrew也没有关系，可以直接将文件下载到本地，然后通过 $ tar -zxvf libssh2-....tar.gz$ cd libssh2-...$ ./configure --prefix=/usr/local/libssh2$ make$ make test$ make install 这种方法来安装，但是我并没有尝试过（笑） 安装pecl官方文档有所有系统的具体安装方法，这里只翻译Mac OS X版的 顺便给一个官方的地址—&gt;Getting and installing the PEAR package manager 下载pear` $ curl -O https://pear.php.net/go-pear.phar 安装pear $ php -d detect_unicode=0 go-pear.phar 进入安装 首先你需要更改安装路径 输入数字1，然后回车 输入 /usr/local/pear 然后回车 然后你需要更改二进制路径 输入数字4，然后回车 输入 /usr/local/bin 然后回车 如果两项内容你都已经更改完成，那就一直回车直到安装完成 可以通过$ pear version来判断是否安装成功 安装ssh2终于是回到了主线剧情（笑） 忙活了一圈，终于开始安装真正要使用到的内容了 $ pecl install ssh2 默认情况下pecl的命令不会安装标记为alpha和beta状态的包。如果没有stable的包可以用的话，也可以用一下命令下载一个beta包： $ pecl install ssh2-beta 也可以制定一个版本来安装： $ pecl install ssh2-1.1.2 接下来也是这个教程最麻烦的地方，因为第一次安装可能会遇到很多的错误，都是phpize的原因，当然非第一次安装可以直接跳转—&gt; 我安装的时候遇到了两个错误 第一个错误 grep: /usr/include/php/main/php.h: No such file or directorygrep: /usr/include/php/Zend/zend_modules.h: No such file or directorygrep: /usr/include/php/Zend/zend_extensions.h: No such file or directoryConfiguring for:PHP Api Version:Zend Module Api No:Zend Extension Api No: 这个问题的解决方法如下： $ sudo ln -s /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.*你的版本号*.sdk /usr/include 但是这也会遇到一个问题： ln: /usr/include: Operation not permitted 这和有没有加sudo无关，这是因为苹果在OS X 10.11中引入的SIP特性使得即使加了sudo（也就是具有root权限）也无法修改系统级的目录 两个解决办法 $ xcode-select —install这会自动帮你配置好Unix开发环境，但是我安装了也没有用。。。很难过，等我懂了为什么会再来更新的 暂时停用系统的保护 重新启动机器，开机时按住command+R，出现苹果的标志和进度条后松手 有窗口后选择”实用工具”里的”终端”，输入： $ csrutil disable 回车并重启电脑 $ csrutil status若是返回System Integrity Protection status: disabled.说明系统保护被停用了，这时就可以执行之前的那条命令 但是一定要记得把系统保护开回来，不然手贱就。。。 第二个错误 Cannot find autoconf. Please check your autoconf installation and the $PHP_AUTOCONF environment variable. Then, rerun this script. $ brew install autoconf 不得不再说一次homebrew真好用 其实下载文件到本地也能配置 两个错误解决完成就能正常安装了 ssh2的使用所有的函数官方文档里都有用法以及示例—&gt;Secure Shell 有兴趣自己看 我只需要上传即可，所以只用到了ssh2_scp_send — Send a file via SCP 用法也是非常简单 &lt;?php$connection = ssh2_connect('shell.example.com', 22);ssh2_auth_password($connection, 'username', 'password');ssh2_scp_send($connection, '/local/filename', '/remote/filename', 0644);?&gt; 不过我还是在路径那块浪费了很多时间。。。 可能还要把local端的读写权限改一下。。。 就这样","categories":[{"name":"工作中遇到的问题","slug":"工作中遇到的问题","permalink":"http://yoursite.com/categories/工作中遇到的问题/"}],"tags":[]},{"title":"Test","slug":"Test","date":"2019-04-19T15:12:18.000Z","updated":"2019-04-20T03:02:05.203Z","comments":true,"path":"2019/04/19/Test/","link":"","permalink":"http://yoursite.com/2019/04/19/Test/","excerpt":"","text":"测试","categories":[{"name":"iOS开发学习","slug":"iOS开发学习","permalink":"http://yoursite.com/categories/iOS开发学习/"}],"tags":[]},{"title":"Web服务器搭建的学习","slug":"Web服务器搭建的学习","date":"2018-04-11T13:02:57.000Z","updated":"2018-04-11T13:03:37.000Z","comments":true,"path":"2018/04/11/Web服务器搭建的学习/","link":"","permalink":"http://yoursite.com/2018/04/11/Web服务器搭建的学习/","excerpt":"","text":"。。。。","categories":[],"tags":[]},{"title":"建立博客的想法","slug":"建立博客的想法","date":"2018-03-22T04:43:07.000Z","updated":"2019-05-13T03:38:48.858Z","comments":true,"path":"2018/03/22/建立博客的想法/","link":"","permalink":"http://yoursite.com/2018/03/22/建立博客的想法/","excerpt":"","text":"2019.05.12 星期一 又是一个月过去了，完全不知道要更新什么（笑） 以后有什么想法还是更新在其他日记里吧，就不占用这一篇的空间了 今天是2019.04.20 星期天 前两天终于是回想起了自己还有一个荒废在那里的博客，正好也是学校安排的实习给了我些许空闲的时间（其实是想摸鱼），打算重新拾起博客，也算是整理一下学习的收获。 阿尔伯特·爱因斯坦说过一句话 “If you can’t explain it simply, you don’t understand it well enough. “ 翻译一下便是“如果不能吧一件事用简单的话说清楚，那就表明你理解的还不够透彻。” 这大概就是我写博客的目的，如果能把学到的东西用自己的话描述出来，大概我就真的学懂了。 就这样。 无聊 记录一下学习的进度 装13 …… 暂时就想到这么多","categories":[{"name":"Diary","slug":"Diary","permalink":"http://yoursite.com/categories/Diary/"}],"tags":[]},{"title":"如何建立一个基于Github和hexo的简单个人站点","slug":"如何建立一个基于Github和hexo的简单个人站点","date":"2018-03-22T04:28:26.000Z","updated":"2019-04-20T02:18:19.598Z","comments":true,"path":"2018/03/22/如何建立一个基于Github和hexo的简单个人站点/","link":"","permalink":"http://yoursite.com/2018/03/22/如何建立一个基于Github和hexo的简单个人站点/","excerpt":"","text":"虽然是软件工程专业的学生，但其实最近才接触的这方面的知识。 说到建站，很多人想到的是服务器和域名的租赁，换句话讲就是大笔的金钱。 然而其实Github有一个叫做GitHub Pages的功能，能够让你免费搭建一个属于自己的网站。 本篇文章是我在学习搭建网站后，结合网络的教程自己简化的的一个版本，仅供我自己参考。 其次，本篇文章讲的是GitHub与hexo合作搭建网站，并没有关于Jekyll的内容…… 只适用于Windows系统…… 建站前的准备什么是Github？这段内容并不是重点…… 简单的说就是一个位开发者提供Git仓库共享的托管服务。是一个能让所有人共享代码的好地方。 注册一个GitHub账户其实并没有什么好说的…… 新建一个仓库 选择New repository，在Repository name那栏填上yourname.github.io（这是GitHub pages的固定格式）。 yourname与前面owner相同。 下方的description可以不填，选择public（没钱选private）然后点Create repository，至此就完成了仓库的创建。 下载msysgit下载地址 安装方法就是一路next点到底，中间环境变量选择时请选择Use Git Bash Only，这样比较有13格嘿嘿嘿。 右键桌面出现代表安装完成。 一些设置（在Git Bash中设置） 设置使用git时的姓名和邮箱地址，名字用英文。 $ git config --global user.name \"Firstname Lastname\"$ git config --global user.email \"your_email@example.com\" 这个命令，会在“~/.gitconfig”中以如下形式输入设置文件。 [user] name = Firstname Lastname email = your_email@example.com 可以直接在文件中修改信息，可使用昵称而不是真实姓名。 设置SSH Key 总之需要这个东西进行认证，手打的有点酸了，以后再解释……嘿嘿嘿 运行下面的命令来创建 SSH Key。 $ ssh-keygen -t rsa -C \"your_email@example.com\" 回车，屏幕上会出现 Generating public/private rsa key pair.Enter file in which to save the key(/Users/your_user_directory/.ssh/id_rsa): 回车 Enter passphrase (empty for no passohrase): 输入密码Enter same passphrase again: 再次输入密码 输入密码后会出现一下结果 Your identification has been saved in /Users/your_user_directory/.ssh/id_rsa.Your public key has been saved in /Users/your_user_directory/.ssh/id_rsa.pub.The key fingerprint is:(fingerprint值)your_email@example.comThe key&apos;s randomart image is:略 id_rsa文件是私有密钥，id_rsa.pub是公开密钥 在Github中添加公开密钥 点击右上角的账户设定（Account Settings），选择SSH Key 点击Add SSH Key，出现title和key两个输入框 在Title中输入恰当的密钥名称 Key中粘贴id_rsa.pub文件中的内容 id_rsa.pub中的内容可用如下方式查看。 $ cat ~/.ssh/id_rsa.pub 添加成功之后，创建账户时所用的邮箱就会收到邮件提示。 完成设置后，验证。 $ ssh -T git@github.com 跳出提示后输入yes 出现如下结果即为成功。 Hi yourname! You&apos;ve successfully authenticated, but GitHub does not provid shell access. 安装Node.js下载连接 emmm…… 用npm指令安装Hexonpm install -g hexo-cli Hexo的配置在任意一个文件夹下（自己建一个）用bash命令建立一个终端 $ hexo init 这时候输入 $ hexo generator$ hexo server 当其出现下图所示即为创建完毕 此时打开任意浏览器 输入localhost:4000可查看网页 上传至GitHub上述步骤只是让你能在本地浏览网页 如何在任意一台机子上查看呢 $ hexo deploy 这个命令能将hexo同步至GitHub上你所创建的仓库中 但在此之前，还有一个小的设置 在本地的hexo终端 也就是你创建的那个文档中 找到根目录下的_config.yml文件 将最后的deploy那里改为 deploy: type: git repo: https://github.com/yourname/yourname.github.io.git branch: master 保存后在执行之前的deploy命令即可 然后你就可以用yourname.github.io这个域名（？）在任意电脑上访问你的网站。 PS.几个小的备注 1.hexo是可以更换主题模板的 地址 2.每次更换Hexo主题都要记得先clean一下在generator和deploy $ hexo clean","categories":[{"name":"瞎写","slug":"瞎写","permalink":"http://yoursite.com/categories/瞎写/"}],"tags":[]}]}